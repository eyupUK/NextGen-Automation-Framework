name: Nightly Performance Tests

on:
    schedule:
  # Run every night at 2 AM UTC
      - cron: '0 2 * * *'
  push:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      notify_on_failure:
        description: 'Send notification on failure'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: nightly-perf-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nightly-load-test:
    name: Nightly Load Test
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build/install with Java 21
      - name: Set up Java 21 (build)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install dependencies (no tests)
        run: mvn -B -ntp clean install -DskipTests

      # Switch to Java 17 ONLY for Gatling
      - name: Set up Java 17 (Gatling)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Recompile tests for JDK 17 (Gatling)
        run: mvn -B -ntp clean test-compile -DskipTests -Dmaven.compiler.testRelease=17

      - name: Run Weather API Load Test
        run: |
          mvn -B -ntp gatling:test \
            -DWEATHER_API_KEY="${WEATHER_API_KEY}" \
            -Dgatling.simulationClass=com.example.performance.simulations.WeatherApiPerformanceSimulation \
            -Dperf.users=20 \
            -Dperf.rampup=30 \
            -Dperf.duration=300 \
            -Dperf.type=load

      - name: Run E-commerce API Load Test
        run: |
          mvn -B -ntp gatling:test \
            -Dgatling.simulationClass=com.example.performance.simulations.EcommerceApiPerformanceSimulation \
            -Dperf.users=15 \
            -Dperf.rampup=20

      - name: Debug - List target contents (Nightly)
        if: always()
        run: |
          echo "Listing target directory (if exists):" && ls -la target || true
          echo "\nGatling results:" && ls -la target/gatling-results 2>/dev/null || true
          echo "\nAllure results:" && ls -la target/allure-results 2>/dev/null || true

      - name: Upload Nightly Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-performance-reports-${{ github.run_number }}
          path: target/gatling-results/
          retention-days: 90

      - name: Extract Performance Metrics
        if: always()
        run: |
          mkdir -p performance-trends
          # Extract key metrics from Gatling logs
          if [ -d "target/gatling-results" ]; then
            for dir in target/gatling-results/*/; do
              if [ -f "${dir}js/stats.json" ]; then
                cp "${dir}js/stats.json" "performance-trends/stats-$(date +%Y%m%d).json"
              fi
            done
          fi

      - name: Upload Performance Trends
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-trends-${{ github.run_number }}
          path: performance-trends/
          retention-days: 365

      - name: Performance Report Summary
        if: always()
        run: |
          echo "# üåô Nightly Performance Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Executed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Weather API Load Test (20 users, 5 min)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ E-commerce API Load Test (15 users)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
          echo "- üìä HTML Reports (90 days retention)" >> $GITHUB_STEP_SUMMARY
          echo "- üìà Performance Trends (365 days retention)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Download artifacts to view detailed metrics and charts" >> $GITHUB_STEP_SUMMARY

      - name: Suite Summary - Nightly Performance
        if: always()
        run: |
          echo "# üò¥ Suite Summary - Nightly Performance" >> $GITHUB_STEP_SUMMARY
          echo "Result: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts: nightly-performance-reports-${{ github.run_number }}, performance-trends-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

      - name: Check for Performance Degradation
        if: always()
        run: |
          echo "Checking for performance regressions..."
          # Add custom logic here to compare with baseline
          echo "‚úì Performance check completed"

      - name: Create Issue on Failure
        if: failure() && github.event.inputs.notify_on_failure != 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Nightly Performance Test Failed',
              body: `## Performance Test Failure\n\n**Date:** ${new Date().toISOString()}\n**Run:** #${context.runNumber}\n\n**Action Required:**\n1. Review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n2. Download and analyze the reports\n3. Investigate any performance degradation\n\n**Triggered by:** Scheduled nightly run`,
              labels: ['performance', 'automated-test', 'needs-investigation']
            });
            console.log('Created issue:', issue.data.number);
